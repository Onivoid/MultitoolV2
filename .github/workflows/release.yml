name: Release Windows Builds

on:
    push:
        tags:
            - "v*.*.*"

permissions:
    contents: write

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        name: Build Windows Release
        runs-on: windows-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: latest

            - name: Setup Node.js with pnpm cache
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "pnpm"

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: stable
                  targets: x86_64-pc-windows-msvc

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: "./src-tauri -> target"

            - name: Install frontend dependencies
              run: pnpm install

            - name: Build Standard Release (GitHub Distribution)
              run: |
                  Write-Host "üèóÔ∏è Building Standard (GitHub)..." -ForegroundColor Green
                  $env:TAURI_ENV_DISTRIBUTION = "github"
                  $env:TAURI_ENV_MS_STORE = $null
                  $env:TAURI_ENV_PORTABLE = $null
                  Write-Host "Variables: DISTRIBUTION=$env:TAURI_ENV_DISTRIBUTION, MS_STORE=$env:TAURI_ENV_MS_STORE, PORTABLE=$env:TAURI_ENV_PORTABLE" -ForegroundColor Yellow
                  .\scripts\build-release.ps1 standard

            - name: Build Portable Release (Portable Distribution)
              run: |
                  Write-Host "üì¶ Building Portable..." -ForegroundColor Green
                  $env:TAURI_ENV_PORTABLE = "true"
                  $env:TAURI_ENV_DISTRIBUTION = "github"
                  $env:TAURI_ENV_MS_STORE = $null
                  Write-Host "Variables: DISTRIBUTION=$env:TAURI_ENV_DISTRIBUTION, MS_STORE=$env:TAURI_ENV_MS_STORE, PORTABLE=$env:TAURI_ENV_PORTABLE" -ForegroundColor Yellow
                  .\scripts\build-release.ps1 portable

            - name: Build Microsoft Store Release (for internal use)
              run: |
                  # IMPORTANT: D√©finir explicitement les variables MS Store
                  $env:TAURI_ENV_MS_STORE = "true"
                  $env:TAURI_ENV_DISTRIBUTION = $null
                  $env:TAURI_ENV_PORTABLE = $null
                  Write-Host "üè™ Building Microsoft Store version..." -ForegroundColor Magenta
                  Write-Host "Variables: MS_STORE=$env:TAURI_ENV_MS_STORE, DISTRIBUTION=$env:TAURI_ENV_DISTRIBUTION" -ForegroundColor Yellow
                  .\scripts\build-release.ps1 msix

            - name: Rename Microsoft Store MSI for Release
              run: |
                  if (Test-Path "builds/MicrosoftStoreMSI") {
                      $storeMsi = Get-ChildItem "builds/MicrosoftStoreMSI/*.msi" | Select-Object -First 1
                      if ($storeMsi) {
                          $newName = "MultitoolV2-Installer-MSStore.msi"
                          $newPath = "builds/$newName"
                          Copy-Item $storeMsi.FullName -Destination $newPath
                          Write-Host "‚úÖ Microsoft Store MSI copi√© vers: $newName" -ForegroundColor Green
                          
                          # Ajouter au fichier checksums
                          $hash = (Get-FileHash $newPath -Algorithm SHA256).Hash.ToLower()
                          Add-Content -Path "builds/checksums.txt" -Value "$hash  $newName"
                          Write-Host "‚úÖ Checksum ajout√© pour $newName" -ForegroundColor Green
                      }
                  }

            - name: Verify Build Artifacts
              run: |
                  Write-Host "=== V√©rification des artifacts de build ===" -ForegroundColor Cyan

                  if (Test-Path "builds/portable/MultitoolV2-Portable.exe") {
                    Write-Host "‚úÖ Portable: $(Get-Item 'builds/portable/MultitoolV2-Portable.exe' | Select-Object -ExpandProperty Length) bytes" -ForegroundColor Green
                  } else {
                    Write-Host "‚ùå Portable manquant" -ForegroundColor Red
                    exit 1
                  }

                  if (Test-Path "builds/installer/MultitoolV2-Installer.msi") {
                    Write-Host "‚úÖ Installer: $(Get-Item 'builds/installer/MultitoolV2-Installer.msi' | Select-Object -ExpandProperty Length) bytes" -ForegroundColor Green
                  } else {
                    Write-Host "‚ùå Installer manquant" -ForegroundColor Red
                    exit 1
                  }

                  if (Test-Path "builds/checksums.txt") {
                    Write-Host "‚úÖ Checksums disponibles" -ForegroundColor Green
                    Write-Host "Contenu:" -ForegroundColor Yellow
                    Get-Content "builds/checksums.txt"
                  } else {
                    Write-Host "‚ùå Checksums manquants" -ForegroundColor Red
                    exit 1
                  }

                  # V√©rification que Microsoft Store MSI est cr√©√©
                  if (Test-Path "builds/MultitoolV2-Installer-MSStore.msi") {
                    Write-Host "‚úÖ MS Store MSI: $(Get-Item 'builds/MultitoolV2-Installer-MSStore.msi' | Select-Object -ExpandProperty Length) bytes" -ForegroundColor Green
                  } else {
                    Write-Host "‚ùå MS Store MSI manquant" -ForegroundColor Red
                    exit 1
                  }

            - name: Create Release Notes
              run: |
                  $version = "${{ github.ref_name }}"
                  $notes = @"
                  # MultitoolV2 $version - Release Windows (Non-sign√©)

                  ## ‚ö†Ô∏è Avertissement S√©curit√© - Builds Non-sign√©s

                  Cette application n'est **pas sign√©e num√©riquement** (certificat co√ªteux pour un projet open-source).
                  Windows SmartScreen affichera un avertissement - c'est **normal et attendu**.

                  ## üì• Options d'Installation

                  1. **üèÜ RECOMMAND√â - Version Portable** : Aucune installation, pas d'avertissement SmartScreen
                  2. **üíª Installer Standard** : Avertissement SmartScreen attendu (cliquez "Informations compl√©mentaires" ‚Üí "Ex√©cuter quand m√™me")
                  3. **üè™ MS Store Distribution** : Version pr√©par√©e pour Microsoft Store (avec variables d'environnement MS Store)

                  ## üîê V√©rification de S√©curit√©

                  - ‚úÖ **Code source ouvert** : Enti√®rement auditable sur GitHub
                  - ‚úÖ **Build reproductible** : Workflow GitHub Actions public  
                  - ‚úÖ **Checksums SHA256** : V√©rification d'int√©grit√© fournie ci-dessous

                  ## üìã Checksums SHA256

                  ``````
                  $(Get-Content builds/checksums.txt -Raw)
                  ``````

                  ### Comment installer une app non-sign√©e sur Windows :
                  1. T√©l√©chargez le fichier souhait√©
                  2. Si SmartScreen appara√Æt : **"Informations compl√©mentaires"** ‚Üí **"Ex√©cuter quand m√™me"**
                  3. Ou utilisez la **version portable** (recommand√© - pas d'installation)

                  ### V√©rifier l'int√©grit√© (optionnel) :
                  ``````powershell
                  Get-FileHash MultitoolV2-Installer.msi -Algorithm SHA256
                  Get-FileHash MultitoolV2-Portable.exe -Algorithm SHA256
                  ``````

                  ---
                  **Pourquoi pas de signature ?** Les certificats de signature co√ªtent ~300‚Ç¨/an. 
                  Pour un projet gratuit et open-source, nous privil√©gions la transparence totale du code.

                  **Microsoft Store :** Une version sign√©e par Microsoft sera disponible s√©par√©ment sur le Microsoft Store.
                  "@

                  $notes | Out-File -FilePath "RELEASE_NOTES.md" -Encoding utf8

            - name: Upload Release Assets (Public uniquement)
              uses: softprops/action-gh-release@v1
              with:
                  body_path: RELEASE_NOTES.md
                  files: |
                      builds/portable/MultitoolV2-Portable.exe
                      builds/installer/MultitoolV2-Installer.msi
                      builds/MultitoolV2-Installer-MSStore.msi
                      builds/checksums.txt
                  prerelease: false
                  generate_release_notes: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Summary
              run: |
                  Write-Host ""
                  Write-Host "üéâ RELEASE CR√â√âE AVEC SUCC√àS!" -ForegroundColor Green
                  Write-Host "Version: ${{ github.ref_name }}" -ForegroundColor Cyan
                  Write-Host ""
                  Write-Host "üì¶ Artifacts dans GitHub Release:" -ForegroundColor Yellow
                  Write-Host "  ‚Ä¢ MultitoolV2-Portable.exe (Recommand√©)" -ForegroundColor White
                  Write-Host "  ‚Ä¢ MultitoolV2-Installer.msi (Standard)" -ForegroundColor White  
                  Write-Host "  ‚Ä¢ MultitoolV2-Installer-MSStore.msi (MS Store Distribution)" -ForegroundColor Magenta
                  Write-Host "  ‚Ä¢ checksums.txt" -ForegroundColor White
                  Write-Host ""
                  Write-Host "üè™ Artifact MS Store Distribution:" -ForegroundColor Magenta
                  Write-Host "   MultitoolV2-Installer-MSStore.msi contient TAURI_ENV_MS_STORE=true" -ForegroundColor White
                  Write-Host "   ‚Üí Page 'Mises √† jour' masqu√©e dans la sidebar" -ForegroundColor White
                  Write-Host "   ‚Üí Warnings GitHub non-sign√© masqu√©s" -ForegroundColor White
                  Write-Host ""
                  Write-Host "üåê Release disponible sur:" -ForegroundColor Cyan
                  Write-Host "   https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" -ForegroundColor Blue
